---
layout: post
title: "cgo非权威入门指南"
subtitle: "连接过去，构造未来"
author: "zy"
header-img: "img/post-bg-golang.jpg"
catalog: true
tags:
  - Golang
  - C语言
---

> 不会c的程序员，不是好的程序员

## 为什么要使用cgo

三十年风云激荡，互联网诞生了众多的编程语言，帮助我们实现了信息的互联。但是C语言永远是位于金字塔底层那最坚实的夯土，守护着这张联通世界的网。所谓cgo, 自然是要将golang与c语言联合起来，共建一个生态。下面是对cgo的价值的总结：
1. golang虽然号称可以打遍软件开发的细分领域，是有其局限性的，并不能解决所有的问题。有时候我们还是不得不借助c语言去解决一些需求
2. 通过cgo可以继承c/c++将近半个世纪的软件积累，将其生态收纳进来

简单一点来说，就是cgo提供了golang和c相互调用的机制。某些第三方库可能只有c/c++的实现，完全用纯的golang去重新实现已有的基础设施，是一件工程量浩大的事情。cgo可以让golang直接去调用c或者c++的接口，被调用的c代码可以以源代码，静态链接库或者动态链接库的形式去被链接。当然目前使用得比较多的还是用golang去调用c, 所以这篇博文的主旋律还是golang。

## 最简单的cgo程序
天下武功，都是由hello world开始的，真实项目的cgo程序都比较复杂，现在我们可以由浅入深，从一段的最基本的代码开始。要构造一个最简单的cgo程序，首先是要忽略一个cgo中复杂的特性，同时展示出cgo程序和纯go程序的差别：

```
// hello.go
package main

import "C"

func main() {
   println("hello cgo")
}
```
在这段代码中，通过import "C"语句启动了cgo的特性。虽然在主函数中只是通过Go自带的println函数输出字符串，其中并没有任何和cgo相关的代码，但是go build命令会在编译和链接阶段启动gcc编译器，这已经是一个完整的cgo程序。

## 基于c标准库函数输出字符串

```
// hello.go
package main

//#include <stdio.h>
import "C"

func main() {
    C.puts(C.CString("Hello, World\n"))
}
```
我们不仅仅通过import "C"语句启用CGO特性，同时包含C语言的<stdio.h>头文件。然后通过CGO包的C.CString函数将Go语言字符串转为C语言字符串，最后调用CGO包的C.puts函数向标准输出窗口打印转换后的C字符串。这里有一点需要注意的是，import "C"必须紧跟在注释的头文件之后，不能存在空行，不然程序会报错。

但是我们没有在程序退出前释放C.CString创建的C语言字符串，这会导致内存泄漏。对于这个小程序来说，这样是没有问题的，因为程序退出后操作系统会自动回收程序的所有资源。正确的做法是使用C.free释放内存资源：

```
// hello.go
package main

//#include <stdio.h>
import "C"

func main() {
    cstr := C.CString("Hello, World\n")
    defer C.free(unsafe.Pointer(cstr))
    C.puts(cstr)
}
```


## 使用自己的c函数

前面我们使用了标准库中已有的函数，现在我们来定义一个叫SayHello的函数来实现打印。然后从Go语言环境中调用这个SayHello函数：

```
// hello.go
package main

/*
#include <stdio.h>

static void SayHello(const char* s) {
    puts(s);
}
*/
import "C"

func main() {
    cstr := C.CString("Hello, World\n")
    defer C.free(unsafe.Pointer(cstr))
    C.SayHello(cstr)
}
```
照猫画虎，继续运行go run main.go, 我们还是可以得到想要hello world。但是将c的函数放在代码里面总不是长久之计，我们还是应该将c的代码放在独立的文件中。后面会讲述如何使用cgo引用动态链接库。

## 总结

一旦扯上c语言，就应该警告自己，要去继续补充计算机的基础知识了。要一直磨练自己的基本功，天下武功一大堆，其实换汤不换药，这也是我一直给自己的劝勉，也是写博客的初衷。

## 引用

* [cgo的快速入门](https://chai2010.cn/advanced-go-programming-book/ch2-cgo/ch2-01-hello-cgo.html)






