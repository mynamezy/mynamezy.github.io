---
layout: post
title: "JSON到底是什么?"
subtitle: "JSON is a lightweight, text-based, language-independent syntax for defining data interchange formats"
author: "zy"
header-img: "img/post-bg-os-metro.jpg"
catalog: true
tags:
  - 协议
---

> “The details are the whole story. ”

## 引言
作为一个web开发的小白鼠，对于一些入门级的知识，还是一头雾水。比如说我们很常见JSON对象与JSON字符串，
在开发的过程中，傻傻分不清。今天看了一篇阮师兄的博客以及知乎上大神的回答，感觉颇有收益，在这里写下一些心得。

## JSON 的定义
首先，抛出一个很常见的问题，JSON到底是对象还是字符串？ 这个问题估计会令绝大多数开发者产生疑惑。但就如我给这篇文章打的标签一样，JSON的定位是**协议**：JSON是一种文本格式，能用于在不同编程语言中交换结构化数据。而**字符串**是大部分编程语言中存储文本数据的数据类型，在这些编程语言中你可以把JSON （文本）存储在字符串内。从而，我们可以得出结论，JSON是一种**字符串**。

## JSON的出现
在JSON出现之前，大家一直用XML来传递数据。因为XML是一种纯文本格式，所以它适合在网络上交换数据。XML本身不算复杂，但是，加上DTD、XSD、XPath、XSLT等一大堆复杂的规范以后，任何正常的软件开发人员碰到XML都会感觉头大了，最后大家发现，即使你努力钻研几个月，也未必搞得清楚XML的规范。

终于，在2002年的一天，道格拉斯·克罗克福特（Douglas Crockford）同学为了拯救深陷水深火热同时又被某几个巨型软件企业长期愚弄的软件工程师，发明了JSON这种超轻量级的数据交换格式。

## 序列化和反序列化

Ruby种有一个常用的方法：to_json，TO JSON 在语义上是转换成 JSON 格式，而对象本身是无所谓格式不格式的，所以这是**序列化**过程，拿到的是用 JSON 格式描述的数据，即字符串。
**反序列化**，顾名思义就是将字符串转化为某种语言的对象，各个语言的定义了自己的方法。

|  语言   |序列化方法  |反序列化方法|
|  :----:  | :----:  |:----:|
| Ruby  | to_json | parse |
| Golang  | Marshal  |Unmarshal|
|Python|dump|loads|
|Java|stringify|parse|

## 举个栗子
比如说在rails中，我们会用json库中to_json方法将对象序列化成json字符串：

```
test = {
    name: '小明',
    age: 14,
    gender: true,
    height: 1.65,
    grade: nil,
    middle_school: '\\\"W3C\\\" Middle School',
    skills: ['JavaScript', 'Java', 'Python', 'Lisp']
}
```
我们可以看到，这个hash的对象中对'\\'和'"'进行了转义。如果我们将这个value打印到文件中，其显示为：\\"W3C\\" Middle School。当我们使用to_json方法，就还会增加一层转义：

```
"{\"name\":\"小明\",\"age\":14,\"gender\":true,\"height\":1.65,\"grade\":null,\"middle-school\":\"\\\\\\\"W3C\\\\\\\" Middle School\",\"skills\":[\"JavaScript\",\"Java\",\"Python\",\"Lisp\"]}"
```
然后使用JSON.parse解析，我们就可以得到预想中的对象了：

```
test = "{\"name\":\"小明\",\"age\":14,\"gender\":true,\"height\":1.65,\"grade\":null,\"middle-school\":\"\\\\\\\"W3C\\\\\\\" Middle School\",\"skills\":[\"JavaScript\",\"Java\",\"Python\",\"Lisp\"]}"

JSON.parse(test)

{"name"=>"小明",
 "age"=>14,
 "gender"=>true,
 "height"=>1.65,
 "grade"=>nil,
 "middle_school"=>"\\\"W3C\\\" Middle School",
 "skills"=>["JavaScript", "Java", "Python", "Lisp"]}
```
## JSON的数据类型

JSON的数据格式有：number，boolean，string，null，array，object（表示方式为{....}）。

在这里，我又产生了一些一疑问，JSON不是一种字符串吗？怎么又会有数据类型呢？答案是：如果一段字符串符合 JSON 的语法，我们就可以将其简称为一段 JSON，就这么简单。

并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的string规定必须用双引号""，Object的键也必须用双引号""。

## 总结

JSON是我们日常开发中重要的数据交换格式，以前总是处于一种混沌的状态。经过一番梳理，
感觉脉络清晰了很多。

接下来，我们还会对JSON和JS之间的关系以及字符串转义做一个归纳总结。不积硅步，无以至千里。


## 参考

* [JSON 指的是字符串还是对象？](https://www.zhihu.com/question/34468150)
* [数据类型和Json格式](http://www.ruanyifeng.com/blog/2009/05/data_types_and_json.html)
 



